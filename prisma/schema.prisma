generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Claim {
  id               Int           @id @default(autoincrement())
  subject          String
  claim            String
  object           String?
  statement        String?
  effectiveDate    DateTime?
  sourceURI        String?
  howKnown         HowKnown?
  dateObserved     DateTime?
  digestMultibase  String?
  author           String?
  curator          String?
  aspect           String?
  score            Float?
  stars            Int?
  amt              Float?
  unit             String?
  howMeasured      String?
  intendedAudience String?
  respondAt        String?
  confidence       Float?
  issuerId         String?
  issuerIdType     IssuerIdType?
  claimAddress     String?
  proof            String?
  createdAt        DateTime      @default(now())
  lastUpdatedAt    DateTime      @default(now())
  Edge             Edge[]
}

model Edge {
  id                          Int     @id @default(autoincrement())
  startNodeId                 Int
  endNodeId                   Int?
  label                       String
  thumbnail                   String?
  claimId                     Int
  Claim                       Claim   @relation(fields: [claimId], references: [id])
  Node_Edge_endNodeIdToNode   Node?   @relation("Edge_endNodeIdToNode", fields: [endNodeId], references: [id])
  Node_Edge_startNodeIdToNode Node    @relation("Edge_startNodeIdToNode", fields: [startNodeId], references: [id])
}

model Node {
  id                          Int        @id @default(autoincrement())
  nodeUri                     String
  name                        String
  entType                     EntityType
  descrip                     String
  image                       String?
  thumbnail                   String?
  Edge_Edge_endNodeIdToNode   Edge[]     @relation("Edge_endNodeIdToNode")
  Edge_Edge_startNodeIdToNode Edge[]     @relation("Edge_startNodeIdToNode")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String?  @unique
  passwordHash   String?
  name           String?
  authType       AuthType @default(PASSWORD)
  authProviderId String?
}

model CandidUserInfo {
  id               Int     @id @default(autoincrement())
  claimId          Int?    @unique
  firstName        String?
  lastName         String?
  candid_entity_id String
  email            String
  profileURL       String
}

model ValidationRequest {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  context           String
  validatorName     String
  validatorEmail    String
  claimId           Int
  validationClaimId Int?             @unique
  validationStatus  ValidationStatus @default(PENDING)
  response          ResponseStatus?
  validationDate    DateTime?
  statement         String?
}

model ClaimData {
  id      Int     @id @default(autoincrement())
  claimId Int     @unique
  name    String
  Image   Image[]
}

model Image {
  id              Int       @id @default(autoincrement())
  claimId         Int
  url             String
  digestMultibase String?
  metadata        Json?
  effectiveDate   DateTime
  createdDate     DateTime  @default(now())
  owner           String
  signature       String
  ClaimData       ClaimData @relation(fields: [claimId], references: [id])
}

enum ValidationStatus {
  PENDING
  COMPLETED
  REJECTED
  ABANDONED
}

enum AuthType {
  PASSWORD
  GITHUB
}

enum EntityType {
  PERSON
  ORGANIZATION
  CLAIM
  IMPACT
  EVENT
  DOCUMENT
  PRODUCT
  PLACE
  UNKNOWN
  OTHER
}

enum HowKnown {
  FIRST_HAND
  SECOND_HAND
  WEB_DOCUMENT
  VERIFIED_LOGIN
  BLOCKCHAIN
  SIGNED_DOCUMENT
  PHYSICAL_DOCUMENT
  INTEGRATION
  RESEARCH
  OPINION
  OTHER
}

enum IssuerIdType {
  DID
  ETH
  PUBKEY
  URL
}

enum ResponseStatus {
  GREEN
  YELLOW
  GREY
  RED
}
